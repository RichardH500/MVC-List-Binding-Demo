@model PersonViewModel

<div class="text-center">
    <h1 class="display-4">Create new person</h1>
    <p>Use the form below to create a new person.</p>
</div>

<div class="py-4">
    <form asp-area="" asp-controller="Home" asp-action="CreatePerson">
        <h5>Details</h5>
        <div class="row mb-5">
            <div class="col-md-6 mb-3">
                <label asp-for="Name"></label>
                <input class="form-control" asp-for="Name">
                <span class="small text-danger" asp-validation-for="Name"></span>
            </div>
            <div class="col-md-6 mb-3">
                <label asp-for="Email"></label>
                <input class="form-control" asp-for="Email">
                <span class="small text-danger" asp-validation-for="Email"></span>
            </div>
        </div>

        <h5>Hobbies</h5>
        <!-- Headings -->
        <div class="row mb-2">
            <div class="col mb-2">
                <label>@Html.DisplayNameFor(m => m.Hobbies[0].Name)</label>
            </div>
            <div class="col mb-2">
                <label>@Html.DisplayNameFor(m => m.Hobbies[0].Type)</label>
            </div>
            <div class="col-auto">
                <button class="btn btn-success" type="button" onclick="addRow()">+</button>
            </div>
        </div>
        <!-- Data -->
        <div id="hobbies-wrapper">
            @for (int i = 0; i < Model.Hobbies.Count; i++)
            {
                <div class="row-item">
                    <div class="row">
                        <div class="col mb-2">
                            <input class="form-control" asp-for="@Model.Hobbies[i].Name" />
                            <span class="small text-danger" asp-validation-for="@Model.Hobbies[i].Name"></span>
                        </div>
                        <div class="col mb-2">
                            <select class="form-control" asp-for="@Model.Hobbies[i].Type">
                                @foreach (var type in Enum.GetValues(typeof(HobbyType)).Cast<HobbyType>())
                                {
                                    <option value="@type">@type</option>
                                }
                            </select>
                        </div>
                        <div class="col-auto">
                            <button class="btn btn-danger" type="button" onclick="deleteRow(this)">x</button>
                        </div>

                        <!-- This is the key - the name must match the property name - the value must match the  -->
                        <input type="hidden" name="Hobbies.Index" value="@i" />
                    </div>
                </div>
            }
        </div>
        <div class="mt-3">
            <button class="btn btn-primary" type="submit">Submit</button>
        </div>
    </form>
</div>



<!-- The template for adding a new row - you'd find a more elegant solution to this, perhaps return from server in an ajax call'-->
<template id="new-product-row">
    <div class="row-item">
        <div class="row">
            <div class="col mb-2">
                <input class="form-control" name="Hobbies[{{NewValue}}].Name" />
            </div>
            <div class="col mb-2">
                <select class="form-control" name="Hobbies[{{NewValue}}].Type">
                    @foreach (var type in Enum.GetValues(typeof(HobbyType)).Cast<HobbyType>())
                    {
                        <option value="@type">@type</option>
                    }
                </select>
            </div>
            <div class="col-auto">
                <button class="btn btn-danger" type="button" onclick="deleteRow(this)">x</button>
            </div>

            <!-- This is the key - the name must match the property name - the value must match the  -->
            <input type="hidden" name="Hobbies.Index" value="{{NewValue}}" />
        </div>
    </div>
</template>

@section scripts {

    <script>

        var newRowIndex = 100000;


        function deleteRow(el) {
            el.closest(".row-item").remove();
        }

        function addRow() {
            let template = document.getElementById('new-product-row');

            // create an empty element and replace all instances of the placeholder with the new id
            var div = document.createElement('div');
            div.appendChild(template.content.cloneNode(true));

            div = div.innerHTML.replace(/{{NewValue}}/g, newRowIndex);


            // append the template in the row
            var newEl = document.createElement('div');
            newEl.innerHTML = div;
            document.getElementById('hobbies-wrapper').append(newEl);


            newRowIndex++;
        }
    </script>

}